<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传白盒审计（源码审计）</title>
      <link href="/2023/03/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%EF%BC%88%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%89/"/>
      <url>/2023/03/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%EF%BC%88%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="查看pom-xml文件"><a href="#查看pom-xml文件" class="headerlink" title="查看pom.xml文件"></a>查看pom.xml文件</h2><p>寻找是否使用了文件上传的组件，如common-fileupload<br>小技巧：快捷键Ctrl+Shift+F可以在IDEA中全局搜索common-file，如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/07/ulNyS7L6cjIvg2X.png" alt="image-20220819112658814.png"><br>注意：在纯代码审计中我们只需要关注后端的源码，也就是Controller层代码<br><img src="https://s2.loli.net/2023/03/07/bOwLyfFW5tNlgrE.png" alt="image-20220819142948521.png"></p><h2 id="审计过滤信息"><a href="#审计过滤信息" class="headerlink" title="审计过滤信息"></a>审计过滤信息</h2><p>找到后端上传文件代码部分后并开始判断对上传上来的文件是否做过滤<br><img src="https://s2.loli.net/2023/03/07/pm7axWJzwclBRFV.png" alt="image-20220819143623606.png"><br>对uploadfile方法进行审计，中间使用了fs.savefile()方法对文件进行了保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;fileupload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">uploadfile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, <span class="meta">@RequestParam(&quot;pathid&quot;)</span> Long pathid,</span></span><br><span class="line"><span class="params">HttpSession session, Model model)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"><span class="type">Long</span> <span class="variable">userid</span> <span class="operator">=</span> Long.parseLong(session.getAttribute(<span class="string">&quot;userId&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> udao.findOne(userid);</span><br><span class="line"><span class="type">FilePath</span> <span class="variable">nowpath</span> <span class="operator">=</span> fpdao.findOne(pathid);</span><br><span class="line"><span class="comment">// true 表示从文件使用上传</span></span><br><span class="line"><span class="type">FileList</span> <span class="variable">uploadfile</span> <span class="operator">=</span> (FileList) fs.savefile(file, user, nowpath, isfile:<span class="literal">true</span>);</span><br><span class="line">System.out.println(uploadfile);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">&quot;pathid&quot;</span>, pathid);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/filetest&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs.savefile()方法代码剖析</span></span><br><span class="line">RequestMapping方法请求一个上传文件的的控制器</span><br><span class="line">可以看出来此处MultipartFile file上传了一个file</span><br><span class="line">将上传上来的file文件通过savefile()方法进行文件保存,其中savefile函数通过把上传的file文件、userid、nowpath路径进行保存,isfile:<span class="literal">true</span>是默认值,不用管</span><br></pre></td></tr></table></figure><p>说到这里，那么我们现在继续跟进savefile()方法，看看savefile方法有没有对保存的文件内容是否有做过滤<br><img src="https://s2.loli.net/2023/03/07/PNymTZ1uhCtngIq.png" alt="image-20220819154851329.png"><br><img src="https://s2.loli.net/2023/03/07/hvOUyr4XIuBREpj.png" alt="image-20220819154924127.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">savefile</span><span class="params">(MultipartFile file, User user, FilePath nowpath, <span class="type">boolean</span> isfile)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot;/&quot;</span> + user.getUserName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">savepath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.rootPath, tmp);</span><br><span class="line">        <span class="comment">//System.out.println(savePath.getPath());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!savepath.exists()) &#123;</span><br><span class="line">            savepath.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line"> <span class="comment">//MultipartFile file, User user, FilePath nowpath, boolean isfile</span></span><br><span class="line"> 将上传上来的file文件通过savefile()方法进行文件保存,其中savefile函数通过把上传的file文件、userid、nowpath路径进行保存,isfile:<span class="literal">true</span>是默认值,不用管 </span><br><span class="line">   </span><br><span class="line"> <span class="comment">//SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy/MM&quot;);    </span></span><br><span class="line"> SimpleDateFormat是定义时间格式的一个对象，此处定义上传时间yyyy/MM的格式</span><br><span class="line">   </span><br><span class="line"><span class="comment">//String tmp = simpleDateFormat.format(new Date()) + &quot;/&quot; + user.getUserName();   </span></span><br><span class="line">意思是String类型的tmp是以传入的一个新的时间 + / +一个新的用户名字组成的，也就是说String类型的tmp说白了就是做为文件的名字来使用的</span><br><span class="line">   </span><br><span class="line"><span class="comment">//File savepath = new File(this.rootPath, tmp);</span></span><br><span class="line"><span class="built_in">this</span>.rootPath是当前路径的意思，此处整体意思是保存当前的路径，把前面的tmp的文件名传进来</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (!savepath.exists()) &#123;</span></span><br><span class="line"><span class="comment">//            savepath.mkdirs();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">判断是否存在这个路径，如果不存在就创建一个 </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">shuffix</span> <span class="operator">=</span> FilenameUtils.getExtension(file.getOriginalFilename());</span><br><span class="line">log.info(<span class="string">&quot;shuffix:&#123;&#125;&quot;</span>, shuffix);</span><br><span class="line"><span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString().toLowerCase() + <span class="string">&quot;.&quot;</span> + shuffix;</span><br><span class="line">tmp = <span class="string">&quot;/&quot;</span>+tmp + <span class="string">&quot;/&quot;</span> + newFileName;</span><br><span class="line"><span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(savepath, newFileName);</span><br><span class="line">file.transferTo(targetFile);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">shuffix</span> <span class="operator">=</span> FilenameUtils.getExtension(file.getOriginalFilename());  </span><br></pre></td></tr></table></figure><p>百度看到getOriginalFilename()这个函数是获取文件名的方法，FilenameUtils.getExtension()是获取文件后缀<br><img src="https://s2.loli.net/2023/03/07/8IAjkf7eSEhprlg.png" alt="image-20220819162525415.png"><br><img src="https://s2.loli.net/2023/03/07/yBO7s5GFYaSovXz.png" alt="image-20220819163143675.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">shuffix</span> <span class="operator">=</span> FilenameUtils.getExtension(file.getOriginalFilename());  </span><br><span class="line"><span class="comment">//整体解读就是获取文件的文件名和后缀</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString().toLowerCase() + <span class="string">&quot;.&quot;</span> + shuffix;  </span><br><span class="line"><span class="comment">//可以看到通过uuid生成一段随机数 + 文件名+后缀，最后String newFileName整体作为一个新的文件的名字</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/07/T5MWIGkOYuBpt6n.png" alt="image-20220819163447398.png"><br>所以说分析到这里，它的文件后缀在过程中没有进行过滤处理 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tmp = <span class="string">&quot;/&quot;</span>+tmp + <span class="string">&quot;/&quot;</span> + newFileName;</span><br><span class="line"><span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(savepath, newFileName);</span><br><span class="line">file.transferTo(targetFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//也就是说  / + tmp路径 + / 文件名+后缀就是上传的文件路径 </span></span><br><span class="line"><span class="comment">//最后     savepath前面保存的路径,文件名+后缀就是上传的目标文件</span></span><br><span class="line"><span class="comment">// 最后    使用file.transferTo()把targetFile传递回来</span></span><br></pre></td></tr></table></figure><p>跳到transferTo()方法查看，发现这个方法就是保存文件到磁盘中的一个方法，目前不用太深入，知道用法就好<br><img src="https://s2.loli.net/2023/03/07/pUJai2dI3yl1Tms.png" alt="image-20220819164735130.png"></p><p><img src="https://s2.loli.net/2023/03/07/dePB1zqDk8YZMbh.png" alt="image-20220819165033135.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以整体只是获取文件名+后缀并使用，中间没有做白名单判断也没有做黑名单判断、没有对文件内容、文件类型判断，审计到这里基本可以判断这个地方存在任意文件上传。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 - 文件上传 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + github 搭建博客</title>
      <link href="/2023/03/07/Hexo%20+%20github%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/03/07/Hexo%20+%20github%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>背景：因为最近打算开始弄个博客用于记录生活和学习&amp;研究内容的平台，博客无疑是一个很好的记录方式，由于以前用服务器搭建有服务端后台功能的博客发现不够安全且需要为服务器付费，所以现在就有了使用GitHub的存储库page来静态访问博客（足够安全和无后台服务端、无需为服务器续费，誒~ 解决方案安排的妥妥哒）的想法，在hexo博客框架下使用cactus主题的博客搭建，存放到GitHub仓库可省去服务器的费用 白嫖快乐！</p><h2 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h2><img src="https://s2.loli.net/2023/03/07/6OyMsXql3t4k8PK.png" alt="image-20230307005340246.png" style="float:left;" /><br><img src="https://s2.loli.net/2023/03/07/ojfb3n7aYLmxdFr.png" alt="image-20230307005520483.png" style="float:left;" /><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><p>本地生成ssh公钥命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;GitHub邮箱&quot;</span></span><br><span class="line">按下回车三次即可生成在C:\Users\xxxx\.ssh目录下</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/03/07/FYitZ92zcQbmRAh.png" alt="image-20230307005939890.png" style="float:left" />打开id_rsa.pub文件即可看到生成出来的公钥<img src="https://s2.loli.net/2023/03/07/f1HUvhpN4LDgtIl.png" alt="image-20230307010126008.png" style="float:left" />GitHub绑定公钥<img src="https://s2.loli.net/2023/03/07/Hsmht3VYokTfCS8.png" alt="image-20230307010333153.png" style="float:left" />测试公钥是否绑定GitHub命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>看到以下提示即成功绑定<img src="https://s2.loli.net/2023/03/07/fp15dB6SRwtaD4N.png" alt="image-20230307010619173.png" style="float:left" /><h2 id="安装hexo框架并生成博客内容"><a href="#安装hexo框架并生成博客内容" class="headerlink" title="安装hexo框架并生成博客内容"></a>安装hexo框架并生成博客内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g //安装</span><br><span class="line">hexo init blog//自定义博客</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install//安装项目所需要的全部包</span><br><span class="line">hexo server//启动hexo</span><br></pre></td></tr></table></figure><h2 id="提交hexo博客文件到GitHub仓库"><a href="#提交hexo博客文件到GitHub仓库" class="headerlink" title="提交hexo博客文件到GitHub仓库"></a>提交hexo博客文件到GitHub仓库</h2><p>修改本地配置文件为以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">respository: 仓库地址</span><br><span class="line">branch:main</span><br></pre></td></tr></table></figure><p>respository为仓库项目<br><img src="https://s2.loli.net/2023/03/07/fyeqFdVHJ83jaLQ.png" alt="image-20230307011831622.png" style="float:left" /><br><img src="https://s2.loli.net/2023/03/07/KgI3VFMmXGNiW6r.png" alt="image-20230307011429858.png" style="float:left" /><br>安装hexo提交工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>提交当前目录文件夹的所有文件的到仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g //生成博客页面</span><br><span class="line">hexo d//提交到GitHub仓库</span><br></pre></td></tr></table></figure><p>提交的过程中需要验证GitHub的token（默认自动弹窗确认账号密码 &#x2F; 直接授权给web验证），提交完成后再刷新下自己的仓库就可以看到本地的项目就已经提交上来了<br><img src="https://s2.loli.net/2023/03/07/j1vwXJmNUAxaieq.png" alt="image-20230307012212388.png" style="float:left" /></p><p>我们访问以下提交上来的博客地址：xxxx.github.io<br><img src="https://s2.loli.net/2023/03/07/VyEdrDobqJWnk1j.png" alt="image-20230307012531949.png" style="float:left" /><br>后期再进行优化，就先这样 下课！</p>]]></content>
      
      
      <categories>
          
          <category> blog杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用Docker命令</title>
      <link href="/2023/03/06/%E5%B8%B8%E7%94%A8Docker%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/03/06/%E5%B8%B8%E7%94%A8Docker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="查看都有哪些镜像："><a href="#查看都有哪些镜像：" class="headerlink" title="查看都有哪些镜像："></a>查看都有哪些镜像：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="删除镜像："><a href="#删除镜像：" class="headerlink" title="删除镜像："></a>删除镜像：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [image]</span><br></pre></td></tr></table></figure><h2 id="查看正在运行的容器："><a href="#查看正在运行的容器：" class="headerlink" title="查看正在运行的容器："></a>查看正在运行的容器：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="查看都有哪些容器："><a href="#查看都有哪些容器：" class="headerlink" title="查看都有哪些容器："></a>查看都有哪些容器：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h2 id="删除容器："><a href="#删除容器：" class="headerlink" title="删除容器："></a>删除容器：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [CONTAINER ID]</span><br></pre></td></tr></table></figure><h2 id="进入容器："><a href="#进入容器：" class="headerlink" title="进入容器："></a>进入容器：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [CONTAINER ID] /bin/bash        </span><br><span class="line">&lt;!-- containerID是容器的ID --&gt;</span><br></pre></td></tr></table></figure><h2 id="停止正在运行的容器："><a href="#停止正在运行的容器：" class="headerlink" title="停止正在运行的容器："></a>停止正在运行的容器：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [CONTAINER ID]</span><br></pre></td></tr></table></figure><h2 id="启动Docker服务："><a href="#启动Docker服务：" class="headerlink" title="启动Docker服务："></a>启动Docker服务：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker 或者 service docker start</span><br></pre></td></tr></table></figure><h2 id="重启Docker服务："><a href="#重启Docker服务：" class="headerlink" title="重启Docker服务："></a>重启Docker服务：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker 或者 sudo service docker restart</span><br></pre></td></tr></table></figure><h2 id="停止Docker服务："><a href="#停止Docker服务：" class="headerlink" title="停止Docker服务："></a>停止Docker服务：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker 或者 service docker stop</span><br></pre></td></tr></table></figure><h2 id="设置开机自启Docker服务："><a href="#设置开机自启Docker服务：" class="headerlink" title="设置开机自启Docker服务："></a>设置开机自启Docker服务：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="Docker设置容器开机自启动："><a href="#Docker设置容器开机自启动：" class="headerlink" title="Docker设置容器开机自启动："></a>Docker设置容器开机自启动：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always [镜像ID]</span><br><span class="line">&lt;!-- （例如：docker update --restart=always e39a959d7bff） --&gt;</span><br></pre></td></tr></table></figure><h2 id="删除全部镜像："><a href="#删除全部镜像：" class="headerlink" title="删除全部镜像："></a>删除全部镜像：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -aq)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker命令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统课后题目分析</title>
      <link href="/2023/03/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/03/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>如果CPU、I1、I2都能并行工作，优先级从高到低依次为job1、job2和job3，优先级高的作业可以抢占优先级低的作业的CPU。<br>每个作业的处理顺序和使用设备的时间如下：<br>job1：I2(20ms)，CPU(10ms)，I1(30ms)，CPU(10ms)<br>job2：I1(20ms)，CPU(20ms)，I2(40ms)<br>job3：CPU(30ms)，I1(20ms)<br>试求:<br>（1）每个作业从投入到完成分别需要的时间;<br>（2）每个作业从投入到完成的CPU利用率;<br>（3）I&#x2F;O设备利用率;</p><h2 id="2、解答"><a href="#2、解答" class="headerlink" title="2、解答"></a>2、解答</h2><p>(1) 每个作业从投入到完成分别需要的时间；<br>  job1: I2(20ms) + CPU(10ms) + I1(30ms) + CPU(10ms) &#x3D; 70ms<br>  job2:  (I1(20ms) + CPU(20ms) + I2(40ms) &#x3D; 80ms<br>  job3:  (CPU(30ms) + I1(20ms) &#x3D; 50ms<br>  所以3个作业从投入到完成分别需要的时间job1 &#x3D; 70ms、job2 &#x3D; 80ms、job3 &#x3D; 50ms。</p><p>(2) 每个作业从投入到完成的CPU利用率；<br>前置知识：<br>CPU利用率指的是CPU在一段时间内实际工作时间与总时间的比值，通常用百分比表示。<br>CPU利用率的计算公式如下：<br>CPU利用率 &#x3D; CPU实际工作时间 &#x2F; 总时间<br>其中，CPU实际工作时间指的是CPU在一段时间内真正工作的时间，不包括等待、挂起、休眠等非工作状态的时间;总时间指的是CPU在一段时间内的总时间，包括CPU实际工作时间和非工作状态的时间。<br>job1：(10ms + 10ms) &#x2F; 70ms &#x3D; 28.57%<br>job2：20ms &#x2F; 80ms &#x3D; 25%<br>job3：30ms &#x2F; 50ms &#x3D; 60%<br>因此，job1 的 CPU 利用率为 28.57%，job2 的 CPU 利用率为 25%，job3 的 CPU 利用率为 60%。</p><p>(3) I&#x2F;O 设备利用率；<br>前置知识：<br>I&#x2F;O设备利用率是指I&#x2F;O设备在总运行时间中实际被占用的时间占比。计算公式如下：<br>I&#x2F;O设备利用率 &#x3D; I&#x2F;O设备运行时间 &#x2F; 总运行时间<br>其中I&#x2F;O设备运行时间是指I&#x2F;O设备在执行作业时实际被占用的时间，总运行时间是指所有作业的运行时间总和。<br>  I1：20ms + 30ms + 20ms &#x3D; 70ms<br>  I2：20ms + 40ms &#x3D; 60ms<br>  因此，I1 的利用率为 70ms &#x2F; 200ms &#x3D; 35%，I2 的利用率为 60ms &#x2F; 200ms &#x3D; 30%。<br>（其中I&#x2F;O的总执行时间 &#x3D; job1+job2+job3的执行时间总和 &#x3D; 200ms）<br>下面是 CPU、I1、I2 的执行时间和空闲时间的图示：<br><img src="https://s2.loli.net/2023/03/06/49iUH8WM5wEvAkl.png" alt="image-20230303170432961.png" style="float: left; zoom: 50%;"></p><p>详细图如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">时间轴：<span class="number">0</span>        <span class="number">20</span>        <span class="number">30</span>        <span class="number">60</span>        <span class="number">80</span>        <span class="number">100</span>       <span class="number">110</span></span><br><span class="line">job1：  I2<span class="number">-20</span><span class="comment">----CPU-10---I1-30----CPU-10--------------F-------------------</span></span><br><span class="line">job2：  <span class="comment">----I1-20---CPU-20-------------I2-40--------------------F---------</span></span><br><span class="line">job3：  CPU<span class="number">-30</span><span class="comment">------------I1-20-------------------------------------F-------</span></span><br><span class="line">CPU：   <span class="comment">--10-----------------------20-----------------30-----------------20--</span></span><br><span class="line">I1：    <span class="comment">---------20--------------30--------------20-------------------------</span></span><br><span class="line">I2：    <span class="comment">--------------20----------------------40----------------------------</span></span><br></pre></td></tr></table></figure><p>其中，CPU 的执行时间为 70ms（10ms + 10ms + 20ms + 30ms），空闲时间为 40ms；I1 的执行时间为 70ms（20ms + 30ms + 20ms），空闲时间为 130ms；I2 的执行时间为 60ms（20ms + 40ms），空闲时间为 140ms。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性结构-实现顺序表的数据存储、初始化、插入、获取元素、遍历</title>
      <link href="/2023/03/05/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84-%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E3%80%81%E9%81%8D%E5%8E%86/"/>
      <url>/2023/03/05/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84-%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E3%80%81%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>课堂上老师实现的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SQList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SQList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListInsert</span><span class="params">(SQList *L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>( i &lt; <span class="number">1</span> || i &gt; L-&gt;length +<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:insert index error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( L-&gt;length == MAXSIZE )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:List is full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( j = L-&gt;length; j &gt;= i; j-- )</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElement</span><span class="params">(SQList *L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Get index error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(SQList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SQList L;</span><br><span class="line">    <span class="type">int</span> i, e;</span><br><span class="line">    InitList(&amp;L);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    Traverse(&amp;L);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>1、包含标准输入输出头文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、定义宏 MAXSIZE 为100。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br></pre></td></tr></table></figure><p>3、定义结构体 SQList，包含 int 类型数组 data 和 int 类型 length。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SQList;</span><br></pre></td></tr></table></figure><p>4、定义函数 InitList，初始化顺序表 L 的长度为 0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SQList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、定义函数 ListInsert，用于在顺序表 L 中第 i 个位置插入元素 e。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ListInsert</span><span class="params">(SQList *L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="comment">// 判断插入位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span>( i &lt; <span class="number">1</span> || i &gt; L-&gt;length +<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:insert index error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断顺序表是否已满</span></span><br><span class="line">    <span class="keyword">if</span> ( L-&gt;length == MAXSIZE )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:List is full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从后向前将元素后移</span></span><br><span class="line">    <span class="keyword">for</span>( j = L-&gt;length; j &gt;= i; j-- )</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在第 i 个位置插入元素 e</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、定义函数 GetElement，获取顺序表 L 中第 i 个位置的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetElement</span><span class="params">(SQList *L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断获取位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Get index error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、定义函数 Traverse，遍历顺序表 L 并输出每个元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(SQList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、主函数中定义顺序表 L，并对其进行初始化。调用 ListInsert 函数向 L 中插入 4 个元素，再调用 Traverse 函数输出顺序表中所有元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SQList L;</span><br><span class="line">    <span class="type">int</span> i, e;</span><br><span class="line">    InitList(&amp;L);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    Traverse(&amp;L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://s2.loli.net/2023/03/06/ZP2TeEUoy68XIWa.png" alt="image-20230228172828013.png" style="zoom:50%;float: left;" /></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该代码实现了顺序表的基本操作，包括初始化顺序表、向顺序表中插入元素、获取顺序表中的元素和遍历顺序表。使用宏定义了线性表的最大长度。通过这些操作可以方便地对线性表进行操作，进行元素的增删改查。主函数中演示了如何使用这些操作来创建顺序表并对其进行操作。新手可以通过理解该代码来学习线性结构中顺序表的基本操作，包括初始化、插入、获取元素和遍历等。</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q1：要学习数据结构前需要什么前置知识？<br>A1：要有编程语言为基础，这里推荐C&#x2F;C++最为和合适，其他Java、Go、C#、Rust等编程语言也可以。数据结构一般与算法关联，重要的是实现思路，任何编程语言都可以实现。其中，在数据结构和算法中大部分都会使用到编程中指针、结构体、各种循环、各种判断语句等等，所以在学习数据结构与算法前编程语言功底是很有必要的。</p><p>Q2：C语言和数据结构有什么学习教程推荐吗？<br>A2：可以通过阅读相关书籍 or 视频教程去针对性学习<br>书籍推荐如下：</p><ul><li>《C Primer Plus（第6版）》 - Stephen Prata著<br>该书是一本非常受欢迎的C语言入门教材。它以易于理解的方式介绍了C语言的基本概念，从简单的程序开始，循序渐进地深入探讨C语言的各个方面。该书还包括许多示例代码和练习题，这些都可以帮助读者快速掌握C语言的编程技能。</li><li>《数据结构与算法分析（C语言描述）》 - Mark Allen Weiss著<br>该书介绍了数据结构和算法的基本原理，并使用C语言进行描述和实现。该书提供了大量的示例代码和练习题，涵盖了众多常见的数据结构和算法，如数组、栈、队列、链表、树、散列表等等。该书内容全面，适合初学者和有一定经验的程序员学习。</li></ul><p>视频教程推荐如下：</p><ul><li>C语言程序设计（CLion版-2022）：<br><a href="https://www.bilibili.com/video/BV1Cr4y137os?p=1&vd_source=df047e552d8052bb5bf4941af8d64c97">https://www.bilibili.com/video/BV1Cr4y137os?p=1&amp;vd_source=df047e552d8052bb5bf4941af8d64c97</a></li><li>数据结构与算法（CLion版-2022）：<br><a href="https://www.bilibili.com/video/BV13W4y127Ey/?spm_id_from=333.337.top_right_bar_window_history.content.click&vd_source=df047e552d8052bb5bf4941af8d64c97">https://www.bilibili.com/video/BV13W4y127Ey/?spm_id_from=333.337.top_right_bar_window_history.content.click&amp;vd_source=df047e552d8052bb5bf4941af8d64c97</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/05/hello-world/"/>
      <url>/2023/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
